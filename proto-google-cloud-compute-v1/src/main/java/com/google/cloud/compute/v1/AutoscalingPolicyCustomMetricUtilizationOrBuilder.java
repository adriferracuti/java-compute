/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/compute/v1/compute.proto

package com.google.cloud.compute.v1;

public interface AutoscalingPolicyCustomMetricUtilizationOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.compute.v1.AutoscalingPolicyCustomMetricUtilization)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values.
   * The metric must have a value type of INT64 or DOUBLE.
   * </pre>
   *
   * <code>string metric = 533067184;</code>
   *
   * @return The metric.
   */
  java.lang.String getMetric();
  /**
   *
   *
   * <pre>
   * The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values.
   * The metric must have a value type of INT64 or DOUBLE.
   * </pre>
   *
   * <code>string metric = 533067184;</code>
   *
   * @return The bytes for metric.
   */
  com.google.protobuf.ByteString getMetricBytes();

  /**
   *
   *
   * <pre>
   * The target value of the metric that autoscaler should maintain. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric.
   * For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler will work to keep this value constant for each of the instances.
   * </pre>
   *
   * <code>double utilization_target = 215905870;</code>
   *
   * @return The utilizationTarget.
   */
  double getUtilizationTarget();

  /**
   *
   *
   * <pre>
   * Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
   * </pre>
   *
   * <code>
   * .google.cloud.compute.v1.AutoscalingPolicyCustomMetricUtilization.UtilizationTargetType utilization_target_type = 340169355;
   * </code>
   *
   * @return The enum numeric value on the wire for utilizationTargetType.
   */
  int getUtilizationTargetTypeValue();
  /**
   *
   *
   * <pre>
   * Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
   * </pre>
   *
   * <code>
   * .google.cloud.compute.v1.AutoscalingPolicyCustomMetricUtilization.UtilizationTargetType utilization_target_type = 340169355;
   * </code>
   *
   * @return The utilizationTargetType.
   */
  com.google.cloud.compute.v1.AutoscalingPolicyCustomMetricUtilization.UtilizationTargetType
      getUtilizationTargetType();
}
